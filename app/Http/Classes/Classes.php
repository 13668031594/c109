<?php
/**
 * Created by PhpStorm.
 * User: yangyang
 * Date: 2019/1/9
 * Time: 下午5:39
 */

namespace App\Http\Classes;

use App\Exceptions\JsonException;
use App\Http\Traits\ModelTrait;

class Classes
{
    use ModelTrait;

    /**
     * 表单验证
     *
     * @param array $array
     * @param array $term
     * @param array $message
     * @param array $customAttributes
     * @return string|null
     */
    protected function validators(array $array = [], array $term = [], array $message = [], array $customAttributes = [])
    {
        //进行表单验证
        $validator = validator($array, $term, $message, $customAttributes);

        //返回错误合集
        return $validator->fails() ? $validator->errors()->first() : null;
    }

    /**
     * 表单验证，json报错
     *
     * @param array $array
     * @param array $term
     * @param array $message
     * @param string $error_code
     * @param array $customAttributes
     */
    protected function validators_json(array $array = [], array $term = [], array $message = [], string $error_code = '000', array $customAttributes = [])
    {
        $result_term = [];

        foreach ($term as $k => $v) {

            $v = 'bail|' . $v;

            $test = substr_count($k, '|');
            if ($test > 0) {

                list($one, $two) = explode('|', $k);

                $k = $one;

                if (!isset($customAttributes[$k])) $customAttributes[$k] = $two;
            }

            $result_term[$k] = $v;
        }

        $result = self::validators($array, $result_term, $message, $customAttributes); // TODO: Change the autogenerated stub

        if ($result) self::error_json($result, $error_code);
    }

    /**
     * 列表获取，组合方法，分页获取
     *
     * @param string $model
     * @param array $other
     * @return array
     */
    protected function list_page(string $model, array $other = [])
    {
        //初始化模型
        $this->table($model);

        //进行筛选
        $this->sql_group($other);

        //数据获取
        $result = $this->paginate();

        //前缀消除
        $result['data'] = self::delete_prefix($result['data']);

        //返回数据
        return [
            'total' => $result['total'],
            'message' => $result['data']
        ];
    }

    /**
     * 列表获取，组合方法，全部获取
     *
     * @param string $model
     * @param array $other
     * @return array
     */
    protected function list_all(string $model, array $other = [])
    {
        //初始化模型
        $this->table($model);

        //进行筛选
        $this->sql_group($other);

        //数据获取
        $lists = $this->all();

        //前缀消除
        $result = self::delete_prefix($lists);

        //返回数据
        return $result;
    }

    /**
     * 前缀删除
     *
     * @param array $array
     * @param null $key
     * @return array
     */
    protected function delete_prefix($array = [], $key = null)
    {
        $arrays = [];

        foreach ($array as $k => $v) {

            //若符合消除条件，消除前缀
            if ((strlen($k) > 6) && (substr($k, 0, 6) == 'young_')) {

                $k = substr($k, 6);
            }

            //若该元素为数组，递归消除
            if (is_object($v) || is_array($v)) {

                $v = self::delete_prefix($v);
            }

            //修改数组的键
            if (!is_null($key) && isset($v[$key]))
                $arrays[$v[$key]] = $v;
            else
                $arrays[$k] = $v;
        }

        return $arrays;
    }

    /**
     * 以json模式报错
     *
     * @param $message
     * @param $code
     * @param $other
     * @throws JsonException
     */
    protected function error_json(string $message, string $code = '000', $other = [])
    {
        $exception = [
            'status' => 'fails',
            'code' => $code,
            'message' => $message,
        ];

        $result = array_merge($exception, $other);

        throw new JsonException(json_encode($result));
    }

    /**
     * 访问url，get
     *
     * @param string $url
     * @return mixed|string
     */
    protected function url_get($url)
    {
        //初始化一个curl会话
        $ch = curl_init();
        //初始化CURL回话链接地址，设置要抓取的url
        curl_setopt($ch, CURLOPT_URL, $url);
        //对认证证书来源的检查，FALSE表示阻止对证书的合法性检查
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        //从证书中检查SSL加密算法是否存在
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        //设置将获得的结果是否保存在字符串中还是输出到屏幕上，0输出，非0不输出
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        //执行请求，获取结果
        $result = curl_exec($ch);
        //关闭会话
        curl_close($ch);

        //反馈结果
        return $result;
    }

    /**
     * 访问url，post
     *
     * @param $url
     * @param $post_data
     * @param int $timeout
     * @return mixed
     */
    protected function url_post($url, $post_data, $timeout = 5)
    {
        /*$ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, 1);
        if ($post_data != '') {
            curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
//            curl_setopt($ch, CURLOPT_SAFE_UPLOAD, false);
        }
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
        curl_setopt($ch, CURLOPT_HEADER, false);
//        curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);//https路径必填参数
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);//https路径必填参数
        curl_setopt($ch, CURLOPT_SSLVERSION, CURL_SSLVERSION_TLSv1);//https路径必填参数
        $file_contents = curl_exec($ch);
        curl_close($ch);
        return $file_contents;*/
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_SSLVERSION, CURL_SSLVERSION_TLSv1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_AUTOREFERER, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $output = curl_exec($ch);
        curl_close($ch);
        return $output;
    }
}