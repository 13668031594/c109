<?php
/**
 * Created by PhpStorm.
 * User: yangyang
 * Date: 2019/1/9
 * Time: 下午5:39
 */

namespace App\Http\Classes;

use App\Exceptions\JsonException;
use App\Http\Traits\ModelTrait;

class Classes
{
    use ModelTrait;

    /**
     * 表单验证
     *
     * @param array $array
     * @param array $term
     * @param array $message
     * @param array $customAttributes
     * @return string|null
     */
    protected function validators(array $array = [], array $term = [], array $message = [], array $customAttributes = [])
    {
        //进行表单验证
        $validator = validator($array, $term, $message, $customAttributes);

        //返回错误合集
        return $validator->fails() ? $validator->errors()->first() : null;
    }

    /**
     * 表单验证，json报错
     *
     * @param array $array
     * @param array $term
     * @param array $message
     * @param string $error_code
     * @param array $customAttributes
     */
    protected function validators_json(array $array = [], array $term = [], array $message = [], string $error_code = '000', array $customAttributes = [])
    {
        $result_term = [];

        foreach ($term as $k => $v) {

            $v = 'bail|' . $v;

            $test = substr_count($k, '|');
            if ($test > 0) {

                list($one, $two) = explode('|', $k);

                $k = $one;

                if (!isset($customAttributes[$k])) $customAttributes[$k] = $two;
            }

            $result_term[$k] = $v;
        }

        $result = self::validators($array, $result_term, $message, $customAttributes); // TODO: Change the autogenerated stub

        if ($result) self::error_json($result, $error_code);
    }

    /**
     * 列表获取，组合方法，分页获取
     *
     * @param string $model
     * @param array $other
     * @return array
     */
    protected function list_page(string $model, array $other = [])
    {
        //初始化模型
        $this->table($model);

        //进行筛选
        $this->sql_group($other);

        //数据获取
        $result = $this->paginate();

        //前缀消除
        $result['data'] = self::delete_prefix($result['data']);

        //返回数据
        return [
            'total' => $result['total'],
            'message' => $result['data']
        ];
    }

    /**
     * 列表获取，组合方法，全部获取
     *
     * @param string $model
     * @param array $other
     * @return array
     */
    protected function list_all(string $model, array $other = [])
    {
        //初始化模型
        $this->table($model);

        //进行筛选
        $this->sql_group($other);

        //数据获取
        $lists = $this->all();

        //前缀消除
        $result = self::delete_prefix($lists);

        //返回数据
        return $result;
    }

    /**
     * 前缀删除
     *
     * @param array $array
     * @param null $key
     * @return array
     */
    protected function delete_prefix($array = [], $key = null)
    {
        $arrays = [];

        foreach ($array as $k => $v) {

            //若符合消除条件，消除前缀
            if ((strlen($k) > 6) && (substr($k, 0, 6) == DCP)) {

                $k = substr($k, 6);
            }

            //若该元素为数组，递归消除
            if (is_object($v) || is_array($v)) {

                $v = self::delete_prefix($v);
            }

            //修改数组的键
            if (!is_null($key) && isset($v[$key]))
                $arrays[$v[$key]] = $v;
            else
                $arrays[$k] = $v;
        }

        return $arrays;
    }

    /**
     * 以json模式报错
     *
     * @param $message
     * @param $code
     * @param $other
     * @throws JsonException
     */
    protected function error_json(string $message, string $code = '000', $other = [])
    {
        $exception = [
            'status' => 'fails',
            'code' => $code,
            'message' => $message,
        ];

        $result = array_merge($exception,$other);

        throw new JsonException(json_encode($result));
    }
}